<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">

<log4j:configuration debug="false" xmlns:log4j="http://jakarta.apache.org/log4j/">
	<!--
		  Here we use this default ConsoleAppender to log all messages, including
		  Perf4J messages, to System.out.
		-->
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<param name="Target" value="System.out"/>
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n"/>
		</layout>        
	</appender>
    
	<appender name="RollingFileAppender" class="org.apache.log4j.RollingFileAppender">
		<param name="Append" value="true" />
		
		<param name="File" value="H:\\LOG\\log4j.log"/>
		<param name="MaxFileSize" value="1000KB" />
		<param name="MaxBackupIndex" value="20" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n" />
		</layout>
	</appender>
    

	<!-- Perf4J appenders -->
	<!--
		  This AsyncCoalescingStatisticsAppender groups StopWatch log messages
		  into GroupedTimingStatistics messages which it sends on the
		  downstream appenders defined below
		-->
	<appender name="CoalescingStatistics"
		class="org.perf4j.log4j.AsyncCoalescingStatisticsAppender">
		<!--
			  The TimeSlice option is used to determine the time window for which
			  all received StopWatch logs are aggregated to create a single
			  GroupedTimingStatistics log. Here we set it to 10 seconds, overriding
			  the default of 30000 ms
			-->
		<param name="TimeSlice" value="10000"/>
		<!--
			  The CreateRollupStatistics option is used to create "Rollup" tags based on
			  the tag name. If you examine the tag value for the Profiled annotation on
			  the PrimeNumberGenerator.generatePrime() method, you'll notice that it's value
			  is "generatePrime.{$2}". The "{$2}" is expression language syntax that will
			  expand to the value for the last argument to the method. Since that last argument
			  can be any long value, we want to rollup all of those separate tags to a single
			  higher level tag name, which is just "generatePrime". The CreateRollupStatistics
			  option uses the period as a separator, and it then creates rollup tags for any
			  tag names that share a common prefix.
			-->
		<param name="CreateRollupStatistics" value="true"/>
		<!-- These first two appenders are used to create performance graphs -->
		<appender-ref ref="graphExecutionTimes"/>
		<appender-ref ref="graphExecutionTPS"/>
		<!-- This JMX appender is used to expose performance metrics through JMX -->
		<appender-ref ref="perf4jJmxAppender"/>
	</appender>


	<!--
		  This first GraphingStatisticsAppender graphs Mean execution times for the tags specified
		-->
	<appender name="graphExecutionTimes"
		class="org.perf4j.log4j.GraphingStatisticsAppender">
		<!-- Possible GraphTypes are Mean, Min, Max, StdDev, Count and TPS -->
		<param name="GraphType" value="Mean"/>
		<!-- The tags of the timed execution blocks to graph are specified here -->
		<param name="TagNamesToGraph" value="fullPageGeneration,generatePrime,randomFromRandomDotOrg"/>
	</appender>

	<!--
		  This second GraphingStatisticsAppender graphs transactions per second for the tags specified
		-->
	<appender name="graphExecutionTPS"
		class="org.perf4j.log4j.GraphingStatisticsAppender">
		<param name="GraphType" value="TPS"/>
		<param name="TagNamesToGraph" value="fullPageGeneration,generatePrime,randomFromRandomDotOrg"/>
	</appender>

	<!--
		  This JMX appender creates an MBean and publishes it to the platform MBean server by
		  default.
		-->
	<appender name="perf4jJmxAppender" class="org.perf4j.log4j.JmxAttributeStatisticsAppender">
		<!--
			  You must specify the tag names whose statistics should be exposed as
			  MBean attributes.
			-->
		<param name="TagNamesToExpose" value="fullPageGeneration,generatePrime,randomFromRandomDotOrg"/>
	</appender>

	<!-- Loggers -->
	<!--
		  The Perf4J logger. Note that org.perf4j.TimingLogger is the value of the
		  org.perf4j.StopWatch.DEFAULT_LOGGER_NAME constant. Note that additivity
		  is set to true here, which means logging messages will also be sent to
		  parent loggers (e.g. the root logger and system.out). If you set this
		  to false, timing statements are NOT sent to parent loggers.
		-->
	<logger name="org.perf4j.TimingLogger" additivity="true">
		<level value="INFO"/>
		<appender-ref ref="CoalescingStatistics"/>
	</logger>

	<!--
		  The root logger sends all log statements EXCEPT those sent to the perf4j
		  logger to System.out.
		-->
	<root>
		<level value="DEBUG"/>
		<appender-ref ref="console"/>
		<appender-ref ref="RollingFileAppender"/>
	</root>
</log4j:configuration>